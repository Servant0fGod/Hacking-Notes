# picoCTF PIE TIME

## Description:

![description](./images/picoCTF-PIE-TIME-screenshots/description.png)


## Solution:


### Downloaded the source code and the binary, and changed the binary to an executable.

```bash
wget <url_of_sourcecode>
wget <url_of_binary>
```
```bash
sudo chmod +x <binary_file>
```

### I ran the executable, and apparently it's giving me the address of main, and is asking me to enter a memory address to jump to.

![first-run](./images/picoCTF-PIE-TIME-screenshots/executable-first-run.png)


### I entered a random value as the input, and the program returned the message "Segfault Occurred, incorrect address" and exited.

![random-value](./images/picoCTF-PIE-TIME-screenshots/random-value-as-input.png)

### I opened the source code in VScode to take a look at what's going on and I saw a declaration of a function called win that prints the flag but, it was never called in main().

#### win()

![win()](./images/picoCTF-PIE-TIME-screenshots/win-function.png)


#### main()

![main()](./images/picoCTF-PIE-TIME-screenshots/main-function.png)

### I tried to manually call win() in main().

![win-in-main](./images/picoCTF-PIE-TIME-screenshots/win-call.png)

### Recompiled and ran the code, the win() function did execute but, the file "flag.txt" that the win() function reads the flag from, is only available in the target machine. meaning, the only way I can get the flag, is by exploiting the program during runtime while connected to the machine. So no messing with the source code itself.

![no-file](./images/picoCTF-PIE-TIME-screenshots/cant-open-file.png)


### I disassembled the executable using "objdump" to try and look for some useful memory addresses where I saw, main() being at address 0x133d and win() at address 0x12a7.

```bash
objdump -d ./vuln
```

`-d: disassemble`

### address of main()
![address-of-main](./images/picoCTF-PIE-TIME-screenshots/address-of-main.png)

### address of win()
![address-of-win](./images/picoCTF-PIE-TIME-screenshots/address-of-win.png)


### I ran the executable to try and enter the address of win() that I found as the input to see what happens, which resulted in returning "incorrect address" and exiting the program. I also noticed that the address of main() the program has printed (0x5573ab47433d), is different from the address of main() that I found when I disassembled the executable (0x133d).

![12a7-as-input](./images/picoCTF-PIE-TIME-screenshots/12a7-as-input.png)


### I searched the challenge's title on the web (PIE TIME) and found useful information on [https://ir0nstone.gitbook.io/notes/binexp/stack/pie](https://ir0nstone.gitbook.io/notes/binexp/stack/pie). PIE = Position Independent Executable, which makes the program run on different memory addresses each time the program is executed. However, while the memory addresses of the executable are randomized, the offset between different parts of the binary is fixed.

### To confirm this, I ran the program a couple of times, and it did indeed return different addresses for main() on each run.

![confirming-pie](./images/picoCTF-PIE-TIME-screenshots/confirming-pie.png)


### Another way to see if PIE is enabled, is to use checksec.

```bash
checksec --file=./vuln
```

![checksec](./images/picoCTF-PIE-TIME-screenshots/checksec.png)

### With this information, I can now calculate the offset between main() and win() locally by subtracting 0x12a7(win()) from 0x133d(main()), which returned 150 in decimal value, or 0x96 in hexadecimal.

#### Calculating using python.

![offsetCalc](./images/picoCTF-PIE-TIME-screenshots/offsetCalc.png)


#### offset value.

![offset](./images/picoCTF-PIE-TIME-screenshots/offsetValue.png)



### Now the steps ahead are clear, all I have to do is, connect to the machine with netcat, get the address of main(), subtract the offset from it (150) or (0x96 in hex) and enter the result (address of win()) in the input prompt. And hopefuly, that will execute win() and print the flag for me.

```bash
nc <target_address> <target_port>
```

### Okay, the address of main() is 0x5b079d05533d.


![address-of-main-runtime](./images/picoCTF-PIE-TIME-screenshots/address-of-main-runtime.png)


### By subtracting the offset value (150) from main() (0x5b079d05533d), I got the address of win() (0x5b079d0552a7).

#### Calculating using python again.

![winCalc](./images/picoCTF-PIE-TIME-screenshots/winCalc.png)

#### Address of win().

![address-of-win-runtnime](./images/picoCTF-PIE-TIME-screenshots/address-of-win-runtime.png)



### And, flag obtained!

![flag](./images/picoCTF-PIE-TIME-screenshots/flag.png)

## Conclusion:

### New Things I learned:

- **Position Independent Executable (PIE), and how to exploit it,**

---